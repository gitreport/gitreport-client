#!/usr/bin/env ruby

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require "rubygems"
require 'trollop'
require "gitreport"

SUB_COMMANDS = %w(init activate deactivate commit sync import)

def version_info
  File.read(File.dirname(__FILE__)+"/../VERSION").strip
end

def parse_options

  global_opts = Trollop::options do
    version "gitreport #{version_info} (c) 2011 gitreport.com team"
    banner <<-EOS
gitreport is a commandline tool to synchronize your git repo's with gitreport.com

Usage: gitreport <subcommand> [options]

<subcommand> must be one of init, activate, deactivate, commit, sync, import

Examples:

gitreport init       - activate automatic data transfer and import existing commit's metadata
gitreport activate   - activate automatic data transfer
gitreport deactivate - unregister your project from gitreport.com
gitreport commit     - manually transfer your last and stored (offline) commit's metadata to gitreport.com
gitreport sync       - manually transfer stored (offline) commit's metadata to gitreport.com
gitreport import     - import existing commits metadata

gitreport allows the folling [options]:
    EOS

    opt :dry_run, "Don't actually do anything", :short => "-n"
    opt :trace, "Print out stack trace in case of an error", :short => "-t"
    stop_on SUB_COMMANDS
  end

  cmd = ARGV.shift
  Trollop::die "You must specify at least one command" unless cmd

  GitReport.global_opts = global_opts

  cmd_opts =
    case cmd
    when "init"
      GitReport::Hook.set!
      GitReport::BatchSender.send! :history
    when "activate"
      GitReport::Hook.set!
    when "deactivate"
      GitReport::Hook.remove!
    when "commit"
      GitReport::Sender.send! :last_and_stored
    when "sync"
      GitReport::Sender.send! :stored
    when "import"
      GitReport::BatchSender.send! :history
    else
      Trollop::die "unknown subcommand #{cmd.inspect}"
    end

end

parse_options
